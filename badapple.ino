#include <U8g2lib.h>
#include <SPI.h>
#include <SD.h>
#define CSPIN D4
//U8G2_ST7920_128X64_F_8080 u8g2(U8G2_R2, 22, 23, 24, 25, 26, 27, 28, 29, /*enable=*/ 10, /*cs=*/ U8X8_PIN_NONE, /*dc/rs=*/ 12, /*reset=*/ 9); // Remember to set R/W to 0
////lcd:                                  D7,D6,D5,D4,D3,D2,D1,D0
////                                      |  |  |  |  |  |  |  |
////mega2560:                             22,23,24,25,26,27,28,29
U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R2, /* clock=*/ D1, /* data=*/ D2, /* CS=*/ D3, /* reset=*/ D0);
File myFile;
#define SERIAL_DEBUG_ON  //是否启动编译串口调试信息
const byte nBitmapDot[] =                  // 开始图片
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x0F, 0xC0,
  0x01, 0xF0, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x80,
  0x01, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x87,
  0xE3, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x9F,
  0xFB, 0xFF, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0xFF, 0xE1, 0xFF, 0xFE,
  0xFF, 0xBF, 0xBF, 0xFB, 0x0F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFC, 0xFF, 0xED, 0xFF, 0xCE,
  0xFF, 0xBF, 0xBF, 0xFB, 0x3F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x6D, 0x18, 0xAE,
  0xE5, 0xB2, 0xB1, 0xFB, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0xF1, 0xEB, 0xB6,
  0xD9, 0xAC, 0xAE, 0xFB, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0xC7, 0xFF, 0x6D, 0xE8, 0x86,
  0xDD, 0xAE, 0xA0, 0xFB, 0xFF, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xF0, 0x83, 0xFF, 0x6D, 0xEB, 0x7A,
  0xDD, 0xAE, 0xFE, 0xFF, 0xFF, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0xF8, 0x00, 0xFF, 0x71, 0x18, 0x7A,
  0xE1, 0xB0, 0xA1, 0xFB, 0x7F, 0x1C, 0x00, 0x00,
  0x00, 0x00, 0x7C, 0x00, 0xFC, 0xFF, 0xFF, 0xFF,
  0xFD, 0xFE, 0xFF, 0xFF, 0x0F, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x1E, 0x00, 0x70, 0xFE, 0xFF, 0xFF,
  0xFD, 0xFE, 0xFF, 0xBF, 0x01, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x47, 0x00, 0x00, 0xFC, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x03, 0x00, 0xFC, 0x00, 0x00,
  0x00, 0x80, 0xFF, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF8, 0x01, 0x00,
  0x00, 0xC0, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF0, 0x03, 0x00,
  0x00, 0xE0, 0x7F, 0x00, 0x00, 0x80, 0xFF, 0xFE,
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xE0, 0x07, 0x00,
  0x00, 0xF0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFE,
  0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xC0, 0x0F, 0x00,
  0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xE0, 0xFF,
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x80, 0x0F, 0x00,
  0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0xFC, 0xFF,
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x80, 0x1F, 0x00,
  0x00, 0xF8, 0x0F, 0x00, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x1F, 0x00,
  0x00, 0xFC, 0x03, 0x00, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x3F, 0x00,
  0x00, 0x7C, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x17, 0x00, 0x00, 0x00, 0x3E, 0x00,
  0x00, 0x0C, 0x00, 0x00, 0x00, 0xE8, 0xFF, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x10, 0x3E, 0x00,
  0x00, 0xF4, 0x07, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x70, 0x7C, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x60, 0x7C, 0x00,
  0x00, 0xFE, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xC7, 0xFF, 0x1F, 0x00, 0x00, 0xE0, 0x7C, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0x0F, 0xFE, 0x1F, 0x00, 0x00, 0xE0, 0x7D, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xFC, 0xFF, 0xFF,
  0x0F, 0xF8, 0x3F, 0x00, 0x00, 0xC0, 0x7D, 0x00,
  0x00, 0xFE, 0x01, 0x00, 0x00, 0xFE, 0xFF, 0xFF,
  0xE7, 0xE0, 0x7F, 0x00, 0x00, 0xE0, 0x7F, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
  0xFF, 0xC0, 0xFF, 0x03, 0x00, 0xF0, 0x7F, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x80, 0xFF, 0xFF, 0x1F,
  0x38, 0x00, 0xFF, 0x03, 0x00, 0xF0, 0x7F, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0x0F,
  0xE0, 0x1F, 0xFC, 0x03, 0x00, 0xF0, 0x7F, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xFE, 0xFF, 0x07,
  0xE0, 0x1F, 0xF0, 0x03, 0x00, 0xF0, 0x7F, 0x00,
  0x00, 0xFE, 0x07, 0x00, 0x00, 0xFE, 0xFF, 0x07,
  0xC0, 0x1F, 0xC0, 0x01, 0x00, 0xF0, 0x7F, 0x00,
  0x00, 0xFE, 0x07, 0x00, 0x00, 0xFE, 0xFF, 0x07,
  0x80, 0x1F, 0x00, 0x00, 0x00, 0xF6, 0x7F, 0x00,
  0x00, 0xFE, 0x1F, 0x00, 0x00, 0xFE, 0xFF, 0x01,
  0xC0, 0x1F, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00,
  0x00, 0xFE, 0x1F, 0x00, 0x00, 0xFE, 0x7F, 0x00,
  0xF0, 0x0F, 0x00, 0x00, 0x00, 0xFE, 0x7F, 0x00,
  0x00, 0xFC, 0x1F, 0x00, 0x00, 0xFC, 0x1F, 0x00,
  0xFE, 0x0F, 0x00, 0x00, 0x80, 0xFF, 0x3F, 0x00,
  0x00, 0xFC, 0xDF, 0x00, 0x00, 0xFC, 0x07, 0xFF,
  0xFF, 0x0F, 0x00, 0x00, 0x80, 0xFF, 0x3F, 0x00,
  0x00, 0xFC, 0xFF, 0x03, 0x00, 0xFC, 0xC0, 0xFF,
  0xFF, 0x2F, 0x00, 0x00, 0x80, 0xFF, 0x3F, 0x00,
  0x00, 0xF8, 0xFF, 0x03, 0x00, 0x3C, 0xF0, 0xFF,
  0xFF, 0xFF, 0x07, 0x00, 0xC0, 0xFF, 0x3F, 0x00,
  0x00, 0xF8, 0xFF, 0x07, 0x00, 0x04, 0xFC, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x1F, 0x00,
  0x00, 0xF8, 0xFF, 0x07, 0x00, 0x00, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x1F, 0x00,
  0x00, 0xF0, 0xFF, 0x07, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x0F, 0x00,
  0x00, 0xF0, 0xFF, 0x0F, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 0x0F, 0x00,
  0x00, 0xE0, 0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0xF0, 0xFF, 0x07, 0x00,
  0x00, 0xE0, 0xFF, 0x1F, 0x00, 0xFC, 0xFF, 0xFF,
  0xFF, 0xFF, 0x3F, 0x00, 0xF8, 0xFF, 0x07, 0x00,
  0x00, 0xC0, 0xFF, 0x1F, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0xF8, 0xFF, 0x03, 0x00,
  0x00, 0x80, 0x3F, 0x3F, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0xFC, 0xFF, 0x01, 0x00,
  0x00, 0x80, 0x3F, 0x3C, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x1F, 0x00, 0xF8, 0xFF, 0x01, 0x00,
  0x00, 0x00, 0x3F, 0x38, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x0F, 0x00, 0xF8, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x3E, 0x10, 0x00, 0xF0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x0F, 0x00, 0xF0, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x3C, 0x00, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x07, 0x00, 0xF0, 0x7F, 0x00, 0x00,
  0x00, 0x00, 0x3C, 0x00, 0x00, 0xE0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x07, 0x00, 0xF0, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x00, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x03, 0x00, 0x80, 0x1B, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF,
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF,
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF,
  0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00
};
void setup(void) {
  //  pinMode(13, OUTPUT);
  //  digitalWrite(13, LOW);
  //  pinMode(11, OUTPUT);
#ifdef SERIAL_DEBUG_ON
  Serial.begin(115200);
  Serial.println("START!");
#endif

  //  digitalWrite(11, 0);  // set R/W to 0
  u8g2.begin();

  if (!SD.begin(CSPIN)) {
#ifdef SERIAL_DEBUG_ON
    Serial.println("SD card initialization failed");
#endif
    u8g2.setFont(u8g2_font_5x7_mf);
    u8g2.clearBuffer();
    u8g2.drawStr(1, 10, "SD card not found.");
    u8g2.sendBuffer();
    delay(100);
    while (1);
  }

}


byte buf[704];
char str[12];
char number[5];
void loop(void) {
  int n = 1;
  u8g2.clearBuffer();
  u8g2.drawXBM(0, 0, 128, 64, nBitmapDot);
  u8g2.sendBuffer();
  delay(3500);
  u8g2.clear();
  u8g2.setFont(u8g2_font_ncenB08_tr);
  if (!SD.exists("all.bin")) {
    u8g2.setFont(u8g2_font_5x7_mf);
    u8g2.clearBuffer();
    u8g2.drawStr(1, 10, "all.bin not found.");
    u8g2.sendBuffer();
    while (1);
  }
  myFile = SD.open("all.bin"); //open the bin
  if (!myFile) {
    u8g2.setFont(u8g2_font_5x7_mf);
    u8g2.clearBuffer();
    u8g2.drawStr(1, 10, "open file error.");
    u8g2.sendBuffer();
    while (1);
  }

  for (int i = 0; i < 2625; i++) {
    snprintf(number, 6, "%d", n);
#ifdef SERIAL_DEBUG_ON
    Serial.print("Picture:");
    Serial.println(number);
#endif
    for (int j = 0; j < 704; j++) {
      buf[j] = myFile.read();
    }
    u8g2.clearBuffer();
    u8g2.drawXBM(0, 0, 88, 64, buf);//draw picture
    u8g2.drawStr(94, 20, "Page:");
    u8g2.drawStr(96, 40, number); //draw the number
    u8g2.drawFrame(91, 3, 34, 58);
    u8g2.sendBuffer();
    n++;//to next picture
  }
#ifdef SERIAL_DEBUG_ON
  Serial.println("It's over.");
#endif
  u8g2.setFont(u8g2_font_lubI14_tf);
  u8g2.clearBuffer();
  u8g2.drawStr(10, 19, "Thanks");
  u8g2.drawStr(20, 39, "for your");
  u8g2.drawStr(30, 59, "watching");
  u8g2.sendBuffer();
  delay(5000);
}
